#!/usr/bin/env python3
import sys, os
import shutil
import glob
import yaml
import stat
import math
from subprocess import Popen, PIPE
DIR = os.path.dirname(os.path.abspath(__file__))
PROBLEMTOOLS = os.path.join(DIR, 'problemtools')

problem_dir = os.path.abspath(sys.argv[1])
output_dir = os.path.join(problem_dir, '.epsilon')

print('Verifying problem')
p = Popen([os.path.join(PROBLEMTOOLS, 'verifyproblem.py'), problem_dir], cwd=PROBLEMTOOLS, stdout=PIPE)
stdout, _ = p.communicate()
stdout = stdout.decode('utf-8')

errors = 1
for line in stdout.split('\n'):
    if 'tested:' in line:
        errors = int(line.split('tested:')[1].split('errors')[0].strip())
        break

if errors > 0:
    print(stdout)
    sys.exit(1)

timelim = None
for line in stdout.split('\n'):
    if 'setting timelim to' in line:
        timelim = line.split('setting timelim to')[1].strip().split()[0]

assert timelim is not None
timelim = float(timelim)
print('Timelim: %f seconds' % timelim)

if os.path.exists(output_dir):
    shutil.rmtree(output_dir)
os.mkdir(output_dir)

print('Generating HTML')
p = Popen([os.path.join(PROBLEMTOOLS, 'problem2html.py'), problem_dir, '-b', '-d', os.path.join(output_dir, 'statement')], stdout=PIPE)
if p.wait() != 0:
    print('Errors while generating HTML')
    sys.exit(1)

with open(os.path.join(output_dir, 'statement', 'index.html'), 'r') as f:
    for line in f.read().split('\n'):
        if '<h1>' in line:
            problem_title = line.split('<h1>')[1].split('</h1>')[0]
            break

tests = {'sample': [], 'secret': []}
for test_type in tests:
    for tfile in sorted(glob.glob(os.path.join(problem_dir, 'data', test_type, '*.in'))):
        with open(tfile, 'r') as f:
            inp = f.read()
        with open(os.path.splitext(tfile)[0] + '.ans', 'r') as f:
            outp = f.read()
        tests[test_type].append((test_type + '__' + os.path.splitext(os.path.basename(tfile))[0], inp, outp))

problem_yaml = {
    'title': problem_title,
    'examples': []
}

for _, inp, outp in tests['sample']:
    problem_yaml['examples'].append({'input': inp, 'output': outp})

with open(os.path.join(output_dir, 'problem.yml'), 'w') as f:
    yaml.dump(problem_yaml, stream=f)

os.mkdir(os.path.join(output_dir, 'tests'))
for test_type in tests:
    for test, inp, outp in tests[test_type]:
        with open(os.path.join(output_dir, 'tests', test + '.in'), 'w') as f:
            f.write(inp)
        with open(os.path.join(output_dir, 'tests', test + '.out'), 'w') as f:
            f.write(outp)

with open(os.path.join(problem_dir, 'problem.yaml'), 'r') as f:
    problem_opts = yaml.load(f)

if problem_opts['validation'] == 'default':
    validator = os.path.join(PROBLEMTOOLS, 'default_validator', 'default_validator.cc')
elif problem_opts['validation'] == 'custom':
    validator = None
    for prog in sorted(os.listdir(os.path.join(problem_dir, 'output_validators'))):
        ext = os.path.splitext(prog)[1][1:]
        if ext in {'cc', 'cpp', 'py'}:
            validator = os.path.join(problem_dir, 'output_validators', prog)
            break
    if validator is None:
        print("Couldn't find an output validator")
        sys.exit(1)
else:
    print('Unknown validation type')
    sys.exit(1)

validator_src = os.path.join(output_dir, 'tests', os.path.basename(validator))
shutil.copyfile(validator, validator_src)

check = os.path.join(output_dir, 'tests', 'check')
validator_ext = os.path.splitext(validator_src)[1][1:]
if validator_ext in {'cpp', 'cc'}:
    p = Popen(['g++', '-O3', '-o', check, validator_src], stdout=PIPE, stderr=PIPE)
    if p.wait() != 0:
        print("Couldn't compile validator")
        sys.exit(1)
elif validator_ext == 'py':
    with open(validator_src, 'r') as inp:
        with open(check, 'w') as outp:
            outp.write('#!/usr/bin/env python2\n')
            outp.write(inp.read())
    os.chmod(check, os.stat(check).st_mode | stat.S_IEXEC)
else:
    print('Unknown validator type')
    sys.exit(1)

tests_yaml = {
    'time_limit': int(math.ceil(timelim * 1000.0)),
    'memory_limit': 256 * 1024,
    'checker': './check',
}

if 'validator_flags' in problem_opts:
    tests_yaml['checker_options'] = problem_opts['validator_flags'].split()

with open(os.path.join(output_dir, 'tests', 'tests.yml'), 'w') as f:
    yaml.dump(tests_yaml, stream=f)

